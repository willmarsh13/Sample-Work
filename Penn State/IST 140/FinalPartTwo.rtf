{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 package finalexam;\
import java.io.PrintWriter; //Ability to print something to a file\
import java.io.FileNotFoundException; //Ability to do something if file is not found\
import java.util.ArrayList; //Ability to establish an ArrayList\
import java.util.Scanner; //Ability to prompt the user or file for a value\
import java.io.File; //Ability to create files\
public class FinalExam \{\
    public static int[] getGrades()\{\
        int numGrades = (int) (Math.random() * 100); //Generates a random number to decide how many grades to get\
        numGrades = numGrades % 7 + 3; //Narrows the random number to between 3 and 10\
        int[] gradesArr = new int[numGrades]; \
        for (int i = 0;i<numGrades;i++) \{ //For loop to populate gradesArr\
            int num = (int) (Math.random() * 100); //Generates a random number to decide each grade\
            num = num % 100; //Narrows the grade to between 0 and 100 (as an int)\
            gradesArr[i] = num; //assigns each grade to the array (gradesArr)\
        \}\
        return gradesArr; //returns the array\
    \}\
    public static void writeToFile(int[]gradesArr)\{\
        String filename = "grades.txt"; //Establishes the filename as "grades.txt"\
        try(PrintWriter out = new PrintWriter(filename)) \{ // tries to print to the file\
            for(int num:gradesArr) \{ //for loop assigned each value of gradesArr to num\
                out.println(num); //prints num on a seperate line to "grades.txt"\
            \}\
            out.println("EOF"); //Writes "EOF" when it is done printing grades\
        \} catch (FileNotFoundException e) \{ //as long as the file is found, it proceedes\
            System.out.println("Sorry, we could not find the file to write"); //if file is not found, it shows this message\
        \}\
    \}\
    public static ArrayList<Integer> readGrades()\{ \
        ArrayList<Integer> grades = new ArrayList<Integer>(); //Establishes new ArrayList called grades\
        File fileToRead = new File("grades.txt"); //Assigns "grades.txt" to fileToRead\
        try (Scanner read = new Scanner(fileToRead)) \{ //tries to scan "grades.txt"\
            while(read.hasNextInt()) \{ //While the scanner (read) has an int selected it continues\
                int num = read.nextInt(); //it assigns that int to "num" as a temp value\
                grades.add(num); //adds the value of (num) to the ArrayList, grades\
            \}\
        \} catch (FileNotFoundException e) \{ //catches if the file is not found\
            System.out.println("Sorry, we could not find the file to read");\
        \}\
        return grades;\
    \}\
    public static double calcAvgGrades(ArrayList<Integer> grades)\{\
        double sum = 0;\
        double classAvg = 0;\
        double size = 0;\
        if(!grades.isEmpty()) \{ //If the ArrayList has a value, it continues\
            for(int num:grades) \{ //for every value of grades, it assigns to num\
                sum += num; //sums up every value of num and stores it as sum\
                size++; //increases by 1 for each iteration\
            \}\
            classAvg = sum/size; //calculates average using size and sum\
        \}\
        return classAvg;\
    \}\
    public static String determineClassPerformance(double classAvg)\{\
        String performance = null;\
        if(classAvg <= 50) \{ //If the average is 50 or below, performance is poor\
            performance = "poor";\
        \}\
        if(classAvg > 80) \{ //If the average is higher than 80, performance is good\
            performance = "Good";\
        \}\
        if((classAvg <=80) && (classAvg > 50)) \{ //If the average is between 80 (inclusive) or 50, performance is Acceptable\
            performance = "Acceptable";\
        \}\
        return performance;\
    \}\
    public static void main(String[] args) \{\
        String filename = "grades.txt";\
        int[]gradesArr = getGrades(); //Call the getGrades method.\
        writeToFile(gradesArr); //Call the writeToFile method; pass the array of grades\
        ArrayList<Integer> gradeList = readGrades(); //Call the readGrades method\
        double avg = calcAvgGrades(gradeList); //Call calcAvgGrades; pass the array list of grades\
        String performance = determineClassPerformance(avg); //Call determineClassPerformance; pass the average score calculated\
        \
        //Print the average grade and associated class performance with the text "The average grade is " grade number "with a class performance of" performance level\
        System.out.print("The average grade is ");\
        System.out.printf("%.2f", avg);\
        \
        System.out.print("% with a class performance of ");\
        System.out.print(performance);\
        \
        System.out.println();\
    \}\
    \
\}\
}